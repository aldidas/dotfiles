#+title: Doom Emacs Configuration

* Identity
#+begin_src emacs-lisp
;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Aldi Daswanto"
      user-mail-address "aldi@daswanto.com")

#+end_src

* Appearance Setup

** Fonts Setup
Doom exposes five (optional) variables for controlling fonts in Doom. Here are the three important ones:
- `doom-font'
- `doom-variable-pitch-font'
- `doom-big-font' -- used for `doom-big-font-mode'; use this for presentations or streaming.

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd font string. You generally only need these two:

#+begin_src emacs-lisp
(defun my/toolbar-on-off ()
  (tool-bar-mode 1)
  (tool-bar-mode 0))

(add-hook 'doom-after-init-hook (lambda () (my/toolbar-on-off)))

(setq doom-font (font-spec :family "JetBrains Mono Light 1.3" :size 14 :style "ExtraLight" :weight 'normal :height 140)
      doom-variable-pitch-font (font-spec :family "Roboto" :style "Light" :size 12 :weight 'normal)
      doom-big-font (font-spec :family "Roboto" :style "Medium" :size 32 :weight 'normal)
      doom-serif-font (font-spec :family "JetBrains Mono Light 1.3" :size 14 :style "ExtraLight" :weight 'normal :height 140))

(setq-default left-margin-width 1)
(set-window-buffer nil (current-buffer))

(defun special-buffer-mode-font()
  "Set custom font for special mode"
  (interactive)
  (setq buffer-face-mode-face '(:family "Roboto" :height 130))
  (buffer-face-mode t))

(defun org-mode-buffer-font()
  "Set custom font for ORG mode"
  (interactive)
  (setq buffer-face-mode-face '(:family "JetBrains Mono Thin" :height 110))
  (buffer-face-mode t))

(defun special-buffer-mode-mono-font()
  "Set custom monospace font for special mode"
  (interactive)
  (setq buffer-face-mode-face '(:family "JetBrains Mono Thin" :height 100))
  (buffer-face-mode t))

(add-to-list 'default-frame-alist '(height . 30))
(add-to-list 'default-frame-alist '(width . 180))
(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
(add-to-list 'default-frame-alist '(ns-appearance . dark))
#+end_src

#+RESULTS:
: ((tool-bar-lines . 0) (buffer-predicate . doom-buffer-frame-predicate) (right-divider-width . 1) (bottom-divider-width . 1) (cursor-color . #908caa) (background-color . #232136) (foreground-color . #e0def4) (ns-appearance . dark) (ns-transparent-titlebar . t) (width . 180) (height . 30) (vertical-scroll-bars) (menu-bar-lines . tty) (left-fringe . 8) (right-fringe . 8))

** Theme Setup

There are two ways to load a theme. Both assume the theme is installed and available. You can either set `doom-theme' or manually load a theme with the `load-theme' function. This is the default:

#+begin_src emacs-lisp
(setq doom-theme 'doom-rose-pine-moon)
(set-face-attribute 'font-lock-comment-face nil :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil :slant 'italic)
#+end_src


** Statusline Setup

Setup for the doom-modeline.

#+begin_src emacs-lisp
(use-package! doom-modeline
  :ensure t
  :config
  (setq evil-normal-state-tag (propertize "[N]")
        evil-insert-state-tag (propertize "[I]")
        evil-visual-state-tag (propertize "[V]")
        evil-replace-state-tag (propertize "[R]")
        evil-emacs-state-tag (propertize "[E]")
        evil-operator-state-tag (propertize "[O]")
        evil-motion-state-tag (propertize "[M]"))
  (setq doom-modeline-hud t)
  (setq doom-modeline-icon t)
  (setq doom-modeline-major-mode-icon t)
  (setq doom-modeline-modal-icon nil)
  (setq doom-modeline-lsp-icon nil)
  (setq doom-modeline-buffer-modification-icon nil)
  (setq doom-modeline-buffer-state-icon nil)
  (setq doom-modeline-persp-name t)
  (setq doom-modeline-height 40)
  (setq doom-modeline-bar-width 5)
  (setq nerd-icons-scale-factor 1.1)
  (setq doom-modeline-max-length 40)
  (setq doom-modeline-vcs-max-length 100)
  (setq doom-modeline-check-simple-format t))

(after! doom-modeline
  (add-hook 'doom-init-ui-hook
            (lambda ()
              (custom-set-faces
               '(mode-line ((t (:family "JetBrains Mono Light 1.3" :height 0.9 :background "FF"))))
               '(mode-line-active ((t (:family "JetBrains Mono Light 1.3" :height 0.9 :background "FF"))))
               '(mode-line-inactive ((t (:family "JetBrains Mono Light 1.3" :height 0.9 :background "FF"))))))))
#+end_src

#+RESULTS:
| (lambda nil (custom-set-faces '(mode-line ((t (:family JetBrains Mono :height 120 :background FF)))) '(mode-line-active ((t (:family JetBrains Mono :height 120 :background FF)))) '(mode-line-inactive ((t (:family JetBrains Mono :height 120 :background FF)))))) | persp-mode | window-divider-mode | +popup-mode |

** Rainbow Mode

This minor mode sets background color to strings that match color names, e.g. #0000ff is displayed in white with a blue background.

#+begin_src emacs-lisp
(use-package! rainbow-mode
  :config
  (rainbow-mode t))
#+end_src

** Dimmer

This module provides a minor mode that indicates which buffer is currently active by dimming the faces in the other buffers.  It does this nondestructively, and computes the dimmed faces dynamically such that your overall color scheme is shown in a muted form without requiring you to define what is a "dim" version of every face.

#+begin_src emacs-lisp
(use-package! dimmer
  :config
  (dimmer-configure-which-key)
  (dimmer-configure-magit)
  (dimmer-mode t))
#+end_src

* Sidebar

Set sidebar file explorer

#+begin_src emacs-lisp
(use-package! dired
  :config
  (setq dired-dwim-target t)
  (setq doom-sidebar-width 1))
#+end_src

* Line Numbers Setup

The line number will be hidden in both org-mode and vterm-mode. The line number will be shown in `absolute` if editing in insert state of evil, and the line number will be shown in `relative` if navigating in normal state of evil.

#+begin_src emacs-lisp
;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type 'relative)

(defun disable-linum()
  "Disabled Line Numbers"
  (interactive)
  (setq display-line-numbers nil))

(defun enable-absolute-linum()
  "Enable Absolute Line Numbers"
  (interactive)
  (if (string-equal major-mode "vterm-mode")
      (setq display-line-numbers nil)
    (setq display-line-numbers 'absolute)))

(defun enable-relative-linum()
  "Enable Relative Line Numbers"
  (interactive)
  (if (string-equal major-mode "vterm-mode")
      (setq display-line-numbers nil)
    (setq display-line-numbers 'relative)))

(add-hook! 'evil-insert-state-entry-hook 'enable-absolute-linum)
(add-hook! 'evil-insert-state-exit-hook 'enable-relative-linum)
#+end_src

* Dashboard Setup
#+begin_src emacs-lisp
(use-package! dashboard
  :init
(setq dashboard-banner-logo-title nil)
(setq dashboard-set-heading-icons t)
(setq dashboard-set-file-icons t)
(setq dashboard-show-shortcuts t)
(setq dashboard-startup-banner "~/Pictures/doom.png")
(setq dashboard-center-content t)
(setq dashboard-set-footer t)
(setq dashboard-items '((recents . 5)))
:config
(dashboard-setup-startup-hook))
#+end_src

* Terminal

This setup will make the text inside the vterm smaller.

#+begin_src emacs-lisp
(defun shell-look ()
  (text-scale-decrease 1))
(add-hook! 'vterm-mode-hook 'shell-look)
(add-hook! 'vterm-mode-hook 'disable-linum)
#+end_src

* Git
#+begin_src emacs-lisp
(use-package! blamer
  :bind (("s-i" . blamer-show-commit-info))
  :defer 20
  :custom
  (blamer-idle-time 0.3)
  (blamer-min-offset 70)
  :custom-face
  (blamer-face ((t :foreground "#7a88cf"
                   :background "unspecified"
                   :height 140
                   :italic t))))
#+end_src

* Org Mode
#+begin_src emacs-lisp
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/Documents/org")
(setq org-log-done 'time)

(defun set-bidi-env ()
  (interactive)
  (setq bidi-paragraph-direction 'nil))

(defun set-org-mode ()
  (set-bidi-env)
  (disable-linum)
  (visual-line-mode)
  (+org-pretty-mode)
  (hl-line-mode 0)
  ;; (hide-mode-line-mode t)
  (setq
   header-line-format " "
   left-margin-width 4
   right-margin-width 4
   org-src-preserve-indentation nil
   org-edit-src-content-indentation 0)
  (set-window-buffer nil (current-buffer))
  (org-mode-buffer-font))
;; (writeroom-mode))

(setq org-hide-emphasis-markers t)
(add-hook! 'org-mode-hook 'set-org-mode)
(add-hook! 'org-mode-hook 'disable-linum)

(custom-theme-set-faces
 'user
 '(org-document-title ((t (:inherit :height 1.2))))
 '(outline-1 ((t (:inherit extra-bold :height 1.25))))
 '(outline-2 ((t (:inherit bold :height 1.15))))
 '(outline-3 ((t (:inherit bold :height 1.12))))
 '(outline-4 ((t (:inherit semi-bold :height 1.09))))
 '(outline-5 ((t (:inherit semi-bold :height 1.06))))
 '(outline-6 ((t (:inherit semi-bold :height 1.03))))
 '(outline-7 ((t (:inherit semi-bold))))
 '(outline-8 ((t (:inherit semi-bold))))
 '(outline-9 ((t (:inherit semi-bold))))
 '(org-block ((t (:inherit fixed-pitch))))
 '(org-code ((t (:inherit (shadow fixed-pitch)))))
 '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
 '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
 '(org-link ((t (:underline t))))
 '(org-table ((t (:inherit fixed-pitch))))
 '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
 '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))
#+end_src

* LSP
#+begin_src emacs-lisp
(defun lsp-booster--advice-json-parse (old-fn &rest args)
  "Try to parse bytecode instead of json."
  (or
   (when (equal (following-char) ?#)
     (let ((bytecode (read (current-buffer))))
       (when (byte-code-function-p bytecode)
         (funcall bytecode))))
   (apply old-fn args)))
(advice-add (if (progn (require 'json)
                       (fboundp 'json-parse-buffer))
                'json-parse-buffer
              'json-read)
            :around
            #'lsp-booster--advice-json-parse)

(defun lsp-booster--advice-final-command (old-fn cmd &optional test?)
  "Prepend emacs-lsp-booster command to lsp CMD."
  (let ((orig-result (funcall old-fn cmd test?)))
    (if (and (not test?)                             ;; for check lsp-server-present?
             (not (file-remote-p default-directory)) ;; see lsp-resolve-final-command, it would add extra shell wrapper
             lsp-use-plists
             (not (functionp 'json-rpc-connection))  ;; native json-rpc
             (executable-find "emacs-lsp-booster"))
        (progn
          (when-let ((command-from-exec-path (executable-find (car orig-result))))  ;; resolve command from exec-path (in case not found in $PATH)
            (setcar orig-result command-from-exec-path))
          (message "Using emacs-lsp-booster for %s!" orig-result)
          (cons "emacs-lsp-booster" orig-result))
      orig-result)))
(advice-add 'lsp-resolve-final-command :around #'lsp-booster--advice-final-command)


(use-package! lsp-tailwindcss
  :init
  (setq lsp-tailwindcss-add-on-mode t))

(use-package! web-mode
  :config
  (add-to-list 'auto-mode-alist '("\\.ejs\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.njk\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.svelte\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.vue\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.razor\\'" . web-mode))
  (setq web-mode-engines-alist '(("svelte" . "\\.svelte\\'")))
  (setq web-mode-engines-alist '(("razor" . "\\.razor\\'"))))

(use-package! flycheck
  :config
  (flycheck-add-mode 'javascript-eslint 'web-mode)
  (flycheck-add-mode 'javascript-eslint 'rjsx-mode)
  (flycheck-add-mode 'javascript-eslint 'typescript-mode)
  (flycheck-add-mode 'javascript-eslint 'typescript-tsx-mode)
  (global-flycheck-mode t))

(use-package! tree-sitter
  :ensure t
  :config
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))

(use-package! tree-sitter-langs
  :ensure t
  :after tree-sitter)

(define-derived-mode vue-mode web-mode "Vue")
(setq lsp-volar-take-over-mode nil)
(defun lsp-go-install-save-hooks ()
  (add-hook 'before-save-hook 'lsp-organize-imports t t))
(add-hook 'go-mode-hook 'lsp-go-install-save-hooks)
#+end_src

* AI

Setup AI Assistant

#+begin_src emacs-lisp
(use-package aider
  :config
  (setq aider-args '("--model" "o3-mini")))
#+end_src

* Additional Keyboard Mapping
#+begin_src emacs-lisp

(map! :leader
      :desc "Open dired"
      "o p" #'dired-jump)
#+end_src

* Another Setup
#+begin_src emacs-lisp
(use-package! lorem-ipsum)

(use-package! alert
  :commands (alert)
  :init
  (setq alert-default-style 'notifier))

(with-eval-after-load 'projectile
  (add-to-list 'projectile-project-root-files-bottom-up "pubspec.yaml")
  (add-to-list 'projectile-project-root-files-bottom-up "BUILD"))

(setenv "PATH" (concat "/Library/TeX/texbin/" ":" (getenv "PATH")))

(if (fboundp 'mac-auto-operator-composition-mode)
    (mac-auto-operator-composition-mode))

(setq gc-cons-threshold (* 100 1024 1024)
      read-process-output-max (* 1024 1024)
      company-minimum-prefix-length 1
      lsp-lens-enable t
      lsp-signature-auto-activate nil)

(use-package! ultra-scroll
  :init
  (setq scroll-conservatively 101 ; important!
        scroll-margin 0)
  :config
  (ultra-scroll-mode 1))

#+end_src

* Custom Functions

#+begin_src emacs-lisp
(use-package! exec-path-from-shell
  :config
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))

(defun file-notify-rm-all-watches ()
  "Remove all existing file notifications watches from Emacs."
  (interactive)
  (maphash
   (lambda (key _value)
     (file-notify-rm-watch key))
   file-notify-descriptors))

(defun insert-now-timestamp()
  (interactive)
  (org-insert-time-stamp (current-time) t))

(defun insert-now-date()
  (interactive)
  "Return the current day and date as a string, without the time."
  (insert (format-time-string "%A, %B %d, %Y")))

(defun wrap-link-in-anchor (lang)
  "Wrap the highlighted text with an anchor tag using the text as the URL."
  (interactive "sEnter lang: ")
  (when (region-active-p)
    (let ((url (buffer-substring-no-properties (region-beginning) (region-end)))
          (color (cond
                  ((equal lang "id") "#000000")
                  ((equal lang "en") "#004C6E")
                  (t "#004C6E"))))
      (delete-region (region-beginning) (region-end))
      (insert (format "<a href=\"%s\" target=\"_blank\" style=\"text-decoration:underline;color:%s\">%s</a>" url color url)))))

(map! :leader
      :desc "Format Link for the IKAHAN Newsletter"
      "c a" #'wrap-with-anchor-ikahan-mail)

#+end_src
